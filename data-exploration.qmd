```{r libraries}
#| echo: false

# libraries

library(readr)
library(dplyr)
library(stringr)
library(corrplot)
library(car)
library(knitr)
library(broom)
library(ggplot2)
library(gridExtra)
set.seed(25)

# read in data

instagram <- read_csv("~/sta440-individual-project/data/instagram_data.csv")
```

```{r data-clean}
#| echo: false

# random post per user

instagram <- instagram |>
  filter(!is.na(owner_username)) |>
  filter(!is.na(followers)) |>
  group_by(owner_id) |>
  slice_sample(n = 1) |>
  ungroup()

# create hour and day of the week values

instagram$created_at_date <- as.POSIXct(instagram$created_at, 
                                        origin = "1970-01-01", tz = "UTC")
instagram$hour <- as.numeric(format(instagram$created_at_date, "%H"))
instagram$day_of_week <- weekdays(instagram$created_at_date)

# create indicators

instagram <- instagram |> 
  mutate(
  weekend = if_else(day_of_week == "Sunday" | day_of_week == "Saturday", 1, 0),
  caption_length = if_else(is.na(caption), 0, nchar(caption)),
  hashtag = if_else(str_detect(caption, "#"), 1, 0),
  tag = if_else(str_detect(caption, "@"), 1, 0),
  video = if_else(is_video == TRUE, 1, 0), 
  multiple_images = if_else(multiple_images == TRUE, 1, 0),
  location = if_else(is.na(location), 0, 1),
  engagement = likes/followers,
  comments_ratio = comments/followers, 
  hour = as.integer(hour), 
  time_of_day_bin = case_when(
    hour >= 5  & hour < 12 ~ "Morning (5–11am)",
    hour >= 12 & hour < 17 ~ "Afternoon (12–4pm)",
    hour >= 17 & hour < 21 ~ "Evening (5–8pm)",
    TRUE                   ~ "Night (9pm–4am)"
  ),
  time_of_day_bin = factor(
    time_of_day_bin,
    levels = c("Morning (5–11am)", "Afternoon (12–4pm)", 
                 "Evening (5–8pm)", "Night (9pm–4am)"))
  ) |> 
  select(likes, engagement, comments_ratio, followers, following, hour, 
         time_of_day_bin, weekend, caption_length, hashtag, tag, location, 
         video, multiple_images) 

write_csv(instagram, "data/instagram_clean.csv")

```

```{r check-multicollinearity}
#| include: false
# correlation between predictors

name_lookup <- c(
  followers = "Number of followers",
  following = "Number of accounts following",
  weekend = "Posted on weekend",
  caption_length = "Caption length (characters)",
  hashtag = "Caption contains hashtag",
  tag = "Caption contains user tag",
  location = "Post has location tag", 
  video = "Post is a video",
  multiple_images = "Post is a carousel", 
  time_of_day_bin = "Time of day",
  "weekend:video" = "Weekend × Video",
  "followers:weekend" = "Followers × Weekend"
)

predictors <- instagram[, c("followers", "following", "time_of_day_bin", 
                            "weekend", "caption_length", "hashtag", "tag", 
                            "location", "video", "multiple_images")]
cor_matrix <- cor(predictors, use = "complete.obs")


colnames(cor_matrix) <- name_lookup[colnames(cor_matrix)]
rownames(cor_matrix) <- name_lookup[rownames(cor_matrix)]
cor_matrix <- round(cor_matrix, digits = 3) 
kable(cor_matrix, caption = "Correlation between Model Predictors")

# corrplot(cor_matrix, method = "color", type = "upper", tl.cex = 0.8)
# all correlations are <0.6
```

```{r model-selection}
#| echo: false

# make indicator variables
# log transform response variable

instagram$time_of_day_bin <- as.factor(instagram$time_of_day_bin)
instagram$weekend <- as.factor(instagram$weekend)
instagram$hashtag <- as.factor(instagram$hashtag)
instagram$tag <- as.factor(instagram$tag)
instagram$video <- as.factor(instagram$video)
instagram$multiple_images <- as.factor(instagram$multiple_images)
instagram$location <- as.factor(instagram$location)
instagram <- na.omit(instagram)
instagram$log_engagement <- log(instagram$engagement + 1e-4)

# create hour labels

hour_labels <- setNames(paste0(formatC(0:23 %% 12 + 1, width = 2, flag = "0"),
                               ifelse(0:23 < 12, "am", "pm"), "–",
                               formatC((1:24) %% 12 + 1, width = 2, flag = "0"),
                               ifelse(1:24 <= 12, "am", "pm")), 
                        paste0("hour", 1:23))

# model with all predictors 

instagram_model1 <- lm(log_engagement ~ followers + following + 
                         hour + weekend + caption_length + hashtag + tag + video + 
                         multiple_images + location + hour*video + hour*weekend + 
                         weekend*video + followers*weekend, data = instagram)

summary(instagram_model1)

# model with all timing predictors and all significant

instagram_model2 <- step(instagram_model1, 
                         direction = "backward",
                         scope = list(lower = ~ followers + video + multiple_images + 
                                        hour + weekend),)
summary(instagram_model2)

# model without timing predictors

instagram_model3 <- step(instagram_model1, 
                         direction = "backward")
summary(instagram_model3)
```

```{r format models}
# model 1 (all variables)

instagram_model1 |>
  tidy(conf.int = TRUE, conf.level = 0.95) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(term = case_when(
    term == "(Intercept)" ~ "Intercept",
    term == "followers" ~ "Number of followers",
    term == "following" ~ "Number of accounts following",
    term == "caption_length" ~ "Caption length (characters)",
    term == "hashtag1" ~ "Caption contains hashtag",
    term == "tag1" ~ "Caption contains user tag",
    term == "video1" ~ "Post is a video",
    term == "multiple_images1" ~ "Post is a carousel",
    term == "weekend1" ~ "Posted on weekend",
    term == "location1" ~ "Post has location tag",
    term %in% names(hour_labels) ~ hour_labels[term],

    grepl("^hour[0-9]+:video1$", term) ~ paste0(
      "Video × ", hour_labels[gsub(":video1", "", term)]),
    grepl("^hour[0-9]+:weekend1$", term) ~ paste0(
      "Weekend × ", hour_labels[gsub(":weekend1", "", term)]),
    term == "weekend1:video1" ~ "Video × Weekend",
    term == "followers:weekend1" ~ "Followers × Weekend",
    TRUE ~ term
  )) |>
  rename(
    "Exposure Variable" = term,
    "Estimate of Slope" = estimate,
    "95% CI Lower" = conf.low,
    "95% CI Upper" = conf.high,
    "P-Value" = p.value) |>
  mutate(across(
    where(is.numeric),
    ~ if_else(abs(.) < 0.001, "<0.001", sprintf("%.3f", .))
  ))|>
  kable(caption = "Model 1: Regression Model of Instagram Engagement Using Post Characteristics and Time-of-Day Effects")

# format model 2 (chosen model)

instagram_model2 |>
  tidy(conf.int = TRUE, conf.level = 0.95) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(term = case_when(
    term == "(Intercept)" ~ "Intercept",
    term == "followers" ~ "Number of followers",
    term == "caption_length" ~ "Caption length (characters)",
    term == "video1" ~ "Post is a video",
    term %in% names(hour_labels) ~ hour_labels[term],
    term == "multiple_images1" ~ "Post is a carousel",
    term == "weekend1" ~ "Posted on weekend",

    grepl("^hour[0-9]+:video1$", term) ~ paste0(
      "Video × ", hour_labels[gsub(":video1", "", term)]),
    grepl("^hour[0-9]+:weekend1$", term) ~ paste0(
      "Weekend × ", hour_labels[gsub(":weekend1", "", term)]),
    term == "weekend1:video1" ~ "Video × Weekend",
    term == "followers:weekend1" ~ "Followers × Weekend",
    TRUE ~ term)) |>
  rename(
    "Exposure Variable" = term,
    "Estimate of Slope" = estimate,
    "95% CI Lower" = conf.low,
    "95% CI Upper" = conf.high,
    "P-Value" = p.value) |>
  mutate(across(
    where(is.numeric),
    ~ if_else(abs(.) < 0.001, "<0.001", sprintf("%.3f", .))
  ))|>
  kable(caption = "Regression Model of Instagram Engagement Using Post Characteristics and Time-of-Day Effects")
  
# format model 3 

instagram_model3 |>
  tidy(conf.int = TRUE, conf.level = 0.95) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(term = case_when(
    term == "(Intercept)" ~ "Intercept",
    term == "caption_length" ~ "Caption length (characters)",
    term == "weekend1" ~ "Posted on weekend",
    term == "video1" ~ "Post is a video",
    term == "weekend1:video1" ~ "Video × Weekend",
  )) |>
  rename(
    "Exposure Variable" = term,
    "Estimate of Slope" = estimate,
    "95% CI Lower" = conf.low,
    "95% CI Upper" = conf.high,
    "P-Value" = p.value) |>
  mutate(across(
    where(is.numeric),
    ~ if_else(abs(.) < 0.001, "<0.001", sprintf("%.3f", .))
  )) |>
  kable(caption = "Model 3: Regression Model of Instagram Engagement Using Post Characteristics and Time-of-Day Effects")
```

```{r model-comparison}
#| echo: false

# aic and bic values
# need to choose one and indicate it

instagram_model_aic <- AIC(instagram_model1, instagram_model2, instagram_model3) 
instagram_model_bic <- BIC(instagram_model1, instagram_model2, instagram_model3) 

instagram_aic_bic <- data.frame(
  Model = rownames(instagram_model_aic),
  AIC = round(instagram_model_aic$AIC,3),
  BIC = round(instagram_model_bic$BIC,3)
) |> mutate(
  Model = case_when(
    Model == "instagram_model1" ~ "Candidate Model 1",
    Model == "instagram_model2" ~ "Candidate Model 2 (chosen model)",
    Model == "instagram_model3" ~ "Candidate Model 3"))

kable(instagram_aic_bic)

instagram_vif <- vif(instagram_model2)
rownames(instagram_vif) <- name_lookup[rownames(instagram_vif)]
colnames(instagram_vif) <- c(
   "Generalized VIF", 
   "Df (Factor Levels - 1)", 
   "Scaled GVIF"
 )
kable(instagram_vif)
```

```{r check-assumptions}
#| echo: false

# check linearity assumptions

instagram_model_aug <- augment(instagram_model2)

p1 <-ggplot(instagram_model_aug, aes(x = .fitted, y = .resid)) + 
  geom_point(size = 0.5) + 
  geom_hline(yintercept = 0, color = "darkred") + 
  labs(x = "Fitted (predicted) value", y = "Residual") + 
  theme_bw() +
  theme(aspect.ratio = 1)+
  ggtitle("Figure 2.1")

p2 <- ggplot(instagram_model_aug, aes(x = .resid)) + 
  geom_histogram(aes(y = ..density..), 
                     fill = "deepskyblue", color = "darkblue", bins = 25) + 
  stat_function(fun = dnorm, 
                args = list(mean = mean(instagram_model_aug$.resid),
                            sd = sd(instagram_model_aug$.resid)),
                color = "darkred", lwd = 1) +
  labs(x = "Residual", y = "Density") + 
  theme_bw() +
  theme(aspect.ratio = 1)+
  ggtitle("Figure 2.2")

p3 <- ggplot(instagram_model_aug, aes(sample = .resid)) +
  stat_qq(size = 0.5) + 
  stat_qq_line() + 
  theme_bw() + 
  labs(x = "Theoretical quantiles", 
       y = "Sample quantiles") +
  theme(aspect.ratio = 1) +
  ggtitle("Figure 2.3")

grid.arrange(p1, p2, p3, nrow = 1,
             top = "Checking Model Assumptions for Regression")
```







